import math
import matplotlib.pyplot as plt
import numpy as np

show_animation = True

class AStarPlanner:
    def __init__(self, ox, oy, resolution, rr, fc_x, fc_y):
        self.resolution = resolution
        self.rr = rr
        self.min_x, self.min_y = 0, 0
        self.max_x, self.max_y = 0, 0
        self.obstacle_map = None
        self.x_width, self.y_width = 0, 0
        self.motion = self.get_motion_model()
        self.calc_obstacle_map(ox, oy)

        self.fc_x = fc_x
        self.fc_y = fc_y

        self.Delta_C1 = 1  # Cost modifier for fuel-consuming area
        self.costPerGrid = 1

    class Node:
        def __init__(self, x, y, cost, parent_index):
            self.x = x
            self.y = y
            self.cost = cost
            self.parent_index = parent_index

    def planning(self, sx, sy, gx, gy):
        start_node = self.Node(self.calc_xy_index(sx, self.min_x),
                               self.calc_xy_index(sy, self.min_y), 0.0, -1)
        goal_node = self.Node(self.calc_xy_index(gx, self.min_x),
                              self.calc_xy_index(gy, self.min_y), 0.0, -1)

        open_set, closed_set = dict(), dict()
        open_set[self.calc_grid_index(start_node)] = start_node

        while True:
            if not open_set:
                print("Open set is empty..")
                break

            c_id = min(open_set, key=lambda o: open_set[o].cost + self.calc_heuristic(goal_node, open_set[o]))
            current = open_set[c_id]

            if show_animation:
                plt.plot(self.calc_grid_position(current.x, self.min_x),
                         self.calc_grid_position(current.y, self.min_y), "xc")
                self.display_fuel_consuming_area()  # Display the fuel area in each step
                plt.gcf().canvas.mpl_connect('key_release_event',
                                             lambda event: [exit(0) if event.key == 'escape' else None])
                if len(closed_set.keys()) % 10 == 0:
                    plt.pause(0.001)

            if current.x == goal_node.x and current.y == goal_node.y:
                print("Total Trip time required -> ", current.cost)
                goal_node.parent_index = current.parent_index
                goal_node.cost = current.cost
                break

            del open_set[c_id]
            closed_set[c_id] = current

            for i, _ in enumerate(self.motion):
                node = self.Node(current.x + self.motion[i][0],
                                 current.y + self.motion[i][1],
                                 current.cost + self.motion[i][2] * self.costPerGrid, c_id)

                # Add cost for entering the fuel area
                if self.calc_grid_position(node.x, self.min_x) in self.fc_x and \
                   self.calc_grid_position(node.y, self.min_y) in self.fc_y:
                    node.cost += self.Delta_C1 * self.motion[i][2]

                n_id = self.calc_grid_index(node)

                if not self.verify_node(node):
                    continue

                if n_id in closed_set:
                    continue

                if n_id not in open_set:
                    open_set[n_id] = node
                else:
                    if open_set[n_id].cost > node.cost:
                        open_set[n_id] = node

        rx, ry = self.calc_final_path(goal_node, closed_set)
        return rx, ry

    def display_fuel_consuming_area(self):
        # Display the fuel-consuming area
        plt.fill(self.fc_x, self.fc_y, 'y', alpha=0.5, label='Fuel-consuming Area')

    def calc_final_path(self, goal_node, closed_set):
        rx, ry = [self.calc_grid_position(goal_node.x, self.min_x)], [
            self.calc_grid_position(goal_node.y, self.min_y)]
        parent_index = goal_node.parent_index
        while parent_index != -1:
            n = closed_set[parent_index]
            rx.append(self.calc_grid_position(n.x, self.min_x))
            ry.append(self.calc_grid_position(n.y, self.min_y))
            parent_index = n.parent_index

        return rx, ry

    @staticmethod
    def calc_heuristic(n1, n2):
        return math.hypot(n1.x - n2.x, n1.y - n2.y)

    def calc_grid_position(self, index, min_position):
        return index * self.resolution + min_position

    def calc_xy_index(self, position, min_pos):
        return round((position - min_pos) / self.resolution)

    def calc_grid_index(self, node):
        return (node.y - self.min_y) * self.x_width + (node.x - self.min_x)

    def verify_node(self, node):
        px = self.calc_grid_position(node.x, self.min_x)
        py = self.calc_grid_position(node.y, self.min_y)

        if px < self.min_x or py < self.min_y or px >= self.max_x or py >= self.max_y:
            return False

        if self.obstacle_map[node.x][node.y]:
            return False

        return True

    def calc_obstacle_map(self, ox, oy):
        self.min_x = round(min(ox))
        self.min_y = round(min(oy))
        self.max_x = round(max(ox))
        self.max_y = round(max(oy))

        self.x_width = round((self.max_x - self.min_x) / self.resolution)
        self.y_width = round((self.max_y - self.min_y) / self.resolution)

        self.obstacle_map = [[False for _ in range(self.y_width)]
                             for _ in range(self.x_width)]
        for ix in range(self.x_width):
            x = self.calc_grid_position(ix, self.min_x)
            for iy in range(self.y_width):
                y = self.calc_grid_position(iy, self.min_y)
                for iox, ioy in zip(ox, oy):
                    d = math.hypot(iox - x, ioy - y)
                    if d <= self.rr:
                        self.obstacle_map[ix][iy] = True
                        break

    @staticmethod
    def get_motion_model():
        # Only allow horizontal and vertical movements
        return [[1, 0, 1], [0, 1, 1], [-1, 0, 1], [0, -1, 1]]

def main():
    print("Start the A* algorithm demo with modified requirements!")

    grid_size = 1  # [m]
    robot_radius = 1.0  # [m]

    # Generate random start and goal points with at least 40 units apart
    while True:
        sx, sy = np.random.uniform(0, 60, size=2)
        gx, gy = np.random.uniform(0, 60, size=2)
        if math.hypot(gx - sx, gy - sy) >= 40:
            break

    # Generate random obstacles with density control
    num_obstacles = 500  # Adjusted for reasonable density
    ox, oy = [], []
    for _ in range(num_obstacles):
        while True:
            x = np.random.uniform(-10, 60)
            y = np.random.uniform(-10, 60)

            # Ensure obstacles are not near the start or goal points
            if (math.hypot(x - sx, y - sy) >= 5 and math.hypot(x - gx, y - gy) >= 5):
                ox.append(x)
                oy.append(y)
                break

    # Generate a random fuel-consuming area (40x40)
    fc_x, fc_y = [], []
    fc_start_x = np.random.randint(-10, 20)
    fc_start_y = np.random.randint(-10, 20)
    for i in range(fc_start_x, fc_start_x + 40):
        for j in range(fc_start_y, fc_start_y + 40):
            fc_x.append(i)
            fc_y.append(j)

    if show_animation:
        plt.plot(ox, oy, ".k")
        plt.plot(sx, sy, "og")
        plt.plot(gx, gy, "xb")
        plt.plot(fc_x, fc_y, "oy")
        plt.grid(True)
        plt.axis("equal")

    a_star = AStarPlanner(ox, oy, grid_size, robot_radius, fc_x, fc_y)
    rx, ry = a_star.planning(sx, sy, gx, gy)

    if show_animation:
        plt.plot(rx, ry, "-r")
        plt.pause(0.001)
        plt.show()

   
if __name__ == '__main__':
    main()
