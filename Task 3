def display_cost_comparison():
    import matplotlib.pyplot as plt
    import numpy as np
    
    TOTAL_PASSENGERS = 3000
    MAX_FLIGHTS = 12
    FLIGHT_TIME = 120 
    FUEL_COST_PER_KG = 0.76 
    BASE_TIME_COST = 12 
    
    def calculate_trip_cost(capacity):
        num_flights = -(-TOTAL_PASSENGERS // capacity)
        if num_flights > MAX_FLIGHTS:
            return float('inf'), None, None, None, None, None

        num_engines = 4 if capacity >= 300 else 2
        fixed_cost = 2500 if capacity >= 300 else 2000

        additional_time_cost = ((capacity - 100) // 50) * 2
        time_cost_rate = BASE_TIME_COST + additional_time_cost

        fuel_rate = num_engines * 20 

        trip_fuel_cost = FUEL_COST_PER_KG * fuel_rate * FLIGHT_TIME
        trip_time_cost = time_cost_rate * FLIGHT_TIME
        trip_total = trip_fuel_cost + trip_time_cost + fixed_cost

        total_cost = trip_total * num_flights
        
        return (total_cost, num_flights, num_engines, 
                fuel_rate, time_cost_rate, fixed_cost)

    best_design = None
    min_cost = float('inf')
    capacities = list(range(100, 451))
    costs_data = []
    
    for capacity in capacities:
        result = calculate_trip_cost(capacity)
        total_cost = result[0]
        costs_data.append(total_cost)
        
        if total_cost < min_cost:
            min_cost = total_cost
            best_design = {
                'capacity': capacity,
                'total_cost': total_cost,
                'num_flights': result[1],
                'num_engines': result[2],
                'fuel_rate': result[3],
                'time_cost': result[4],
                'fixed_cost': result[5]
            }

    print('\n=== Optimal Aircraft Design ===')
    print(f'Passenger Capacity: {best_design["capacity"]}')
    print(f'Number of Engines: {best_design["num_engines"]}')
    print(f'Fuel Consumption Rate: {best_design["fuel_rate"]} kg/min')
    print(f'Time Cost Rate: ${best_design["time_cost"]}/min')
    print(f'Fixed Cost: ${best_design["fixed_cost"]}')
    print(f'Required Flights: {best_design["num_flights"]}')
    print(f'Total Operating Cost: ${best_design["total_cost"]:.2f}')

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))

    valid_indices = [i for i, cost in enumerate(costs_data) if cost != float('inf')]
    valid_capacities = [capacities[i] for i in valid_indices]
    valid_costs = [costs_data[i] for i in valid_indices]

    ax1.barh(valid_capacities, valid_costs, height=1)
    ax1.set_ylabel('Passenger Capacity')
    ax1.set_xlabel('Total Cost ($)')
    ax1.set_title('Total Cost Comparison for Different Capacities')
    ax1.grid(True, linestyle='--', alpha=0.7)
    
    ax1.axhline(y=best_design['capacity'], color='r', linestyle='--', alpha=0.5)
    
    optimal_flights = best_design['num_flights']
    fuel_cost = (best_design['fuel_rate'] * FLIGHT_TIME * 
                 FUEL_COST_PER_KG * optimal_flights)
    time_cost = best_design['time_cost'] * FLIGHT_TIME * optimal_flights
    fixed_cost = best_design['fixed_cost'] * optimal_flights
    
    costs = [fuel_cost, time_cost, fixed_cost]
    labels = ['Fuel Cost', 'Time Cost', 'Fixed Cost']
    colors = ['#ff9999', '#66b3ff', '#99ff99']
    
    ax2.pie(costs, labels=labels, colors=colors, autopct='%1.1f%%', 
            startangle=90)
    ax2.set_title('Cost Composition Analysis for Optimal Design')
    
    plt.tight_layout()
    plt.show()

display_cost_comparison()
